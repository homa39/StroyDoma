// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ–≤ –∏–∑ API
async function loadHouses() {
    try {
        const response = await fetch('/api/houses');
        const houses = await response.json();
        displayHouses(houses);
        populateHouseSelect(houses);
    } catch (error) {
        console.error('Error loading houses:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤');
    }
}
const message = encodeURIComponent(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –ø—Ä–æ–µ–∫—Ç –¥–æ–º–∞:\n\n` +
    `üè† –ù–∞–∑–≤–∞–Ω–∏–µ: ${house.name}\n` +
    `üìê –ü–ª–æ—â–∞–¥—å: ${house.area} –º¬≤\n` +
    `üè¢ –≠—Ç–∞–∂–µ–π: ${house.floors}\n` +
    `üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${house.materials}\n` +
    `üí∞ –¶–µ–Ω–∞: ${formatPrice(house.price)}`
  );
  

  
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–º–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
function displayHouses(houses) {
    const container = document.getElementById('houses-container');
    container.innerHTML = '';

    houses.forEach(house => {
        const card = createHouseCard(house);
        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–º–∞
function createHouseCard(house) {
    const col = document.createElement('div');
    col.className = 'col-md-4 mb-4 fade-in';
  
    const message = encodeURIComponent(
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –ø—Ä–æ–µ–∫—Ç –¥–æ–º–∞:\n\n` +
      `üè† –ù–∞–∑–≤–∞–Ω–∏–µ: ${house.name}\n` +
      `üìê –ü–ª–æ—â–∞–¥—å: ${house.area} –º¬≤\n` +
      `üè¢ –≠—Ç–∞–∂–µ–π: ${house.floors}\n` +
      `üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${house.materials}\n` +
      `üí∞ –¶–µ–Ω–∞: ${formatPrice(house.price)}`
    );
  
    const telegramLink = `https://t.me/StroyDomaBot?text=${message}`;

  
    col.innerHTML = `
      <div class="card house-card">
        <img src="${house.imageUrl}" class="card-img-top" alt="${house.name}">
        <div class="card-body">
          <h5 class="card-title">${house.name}</h5>
          <p class="card-text">
            <strong>–ü–ª–æ—â–∞–¥—å:</strong> ${house.area} –º¬≤<br>
            <strong>–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:</strong> ${house.floors}<br>
            <strong>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</strong> ${house.materials}<br>
            <strong>–¶–µ–Ω–∞:</strong> ${formatPrice(house.price)}
          </p>
          <a href="${telegramLink}" class="btn btn-primary" target="_blank">
            –•–æ—á—É —ç—Ç–æ—Ç –¥–æ–º
          </a>
        </div>
      </div>
    `;
  
    return col;
  }
  

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è select –≤ —Ñ–æ—Ä–º–µ –∑–∞—è–≤–∫–∏
function populateHouseSelect(houses) {
    const select = document.getElementById('house');
    houses.forEach(house => {
        const option = document.createElement('option');
        option.value = house.uuid;
        option.textContent = house.name;
        select.appendChild(option);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB'
    }).format(price);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
document.getElementById('requestForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        houseId: document.getElementById('house').value
    };

    try {
        const response = await fetch('/api/request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            showSuccess('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            document.getElementById('requestForm').reset();
            bootstrap.Modal.getInstance(document.getElementById('requestModal')).hide();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('Error submitting form:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} notification`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

function showSuccess(message) {
    showNotification(message, 'success');
}

function showError(message) {
    showNotification(message, 'danger');
}



// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadHouses); 